import { getBIP44AddressKeyDeriver } from '@metamask/key-tree';
import { PrivateKey } from 'symbol-sdk';
import { SymbolFacade } from 'symbol-sdk/symbol';

const WalletType = {
	METAMASK: 'metamask'
};

const accountUtils = {
	/**
	 * * Derives a key pair from a mnemonic and an address index.
	 * @param {'mainnet' | 'testnet'} networkName - The network name.
	 * @param {number} addressIndex - The address index.
	 * @returns {Promise<SymbolFacade.KeyPair>} - The derived key pair.
	 */
	async deriveKeyPair(networkName, addressIndex) {
		const facade = new SymbolFacade(networkName);
		const coinType = facade.bip32Path(addressIndex)[1];

		const rootNode = await snap.request({
			method: 'snap_getBip44Entropy',
			params: {
				coinType
			}
		});

		const derivePrivateKey = await getBIP44AddressKeyDeriver(rootNode);
		const key = await derivePrivateKey(addressIndex);

		const privateKey = new PrivateKey(key.privateKeyBytes);
		return new SymbolFacade.KeyPair(privateKey);
	},
	/**
	 * Get latest metamask account index.
	 * @param {Accounts} accounts - The accounts object.
	 * @param {'mainnet' | 'testnet'} networkName - The network name.
	 * @returns {number} - The latest account index.
	 */
	getLatestAccountIndex(accounts, networkName) {
		return Object.values(accounts)
			.filter(walletAccount =>
				WalletType.METAMASK === walletAccount.account.type
				&& networkName === walletAccount.account.networkName)
			.reduce((maxIndex, walletAccount) => Math.max(maxIndex, walletAccount.account.addressIndex), -1);
	}
};

export default accountUtils;

// region type declarations

/**
 * state of the account.
 * @typedef {object} Account
 * @property {string} id - The account id generated by uuid.
 * @property {number} addressIndex - The address index from bip 44.
 * @property {'metamask' | 'import'} type - The wallet type.
 * @property {'mainnet' | 'testnet'} networkName - network name.
 * @property {string} label - The account label.
 * @property {string} address - The account address.
 * @property {string} publicKey - The account public key.
 */

/**
 * Accounts object.
 * @typedef {Record<string, { account: Account, privateKey: string }>} Accounts
 */

// endregion
